trigger:
  - main
  - 'v*.*'

pr:
  - main

parameters:
  - name: DoRelease
    displayName: Release
    type: boolean
    default: false

pool:
  vmImage: windows-2022

variables:
  BuildConfiguration: Release
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true

stages:
  - stage: Build
    jobs:
      - job: BuildSLN
        steps:
          - task: UseDotNet@2
            inputs:
              packageType: "sdk"
              version: "7.0.102"

          - task: DotNetCoreCLI@2
            inputs:
              command: custom
              custom: tool
              arguments: install --tool-path . nbgv
            displayName: Install NBGV tool

          - script: nbgv cloud
            displayName: Set Version

          - task: DotNetCoreCLI@2
            inputs:
              command: build
              projects: .\AntiXSS.sln
              arguments: -c $(BuildConfiguration)
            displayName: Build

          - powershell: |
              mkdir $(Build.ArtifactStagingDirectory)\Packages
              $version = .\nbgv get-version -f json | ConvertFrom-Json
              dotnet pack .\Microsoft.Security.Application.Encoder\Microsoft.Security.Application.Encoder.csproj -c $(BuildConfiguration) --no-build -o $(Build.ArtifactStagingDirectory)\Packages /p:NuspecProperties="version=$($version.NuGetPackageVersion);RepositoryType=git;RepositoryCommit=$($version.GitCommitId);RepositoryUrl=https://github.com/hangy/AntiXSS" 
              dotnet pack .\Microsoft.Security.Application.HtmlSanitization\Microsoft.Security.Application.HtmlSanitization.csproj -c $(BuildConfiguration) --no-build -o $(Build.ArtifactStagingDirectory)\Packages /p:NuspecProperties="version=$($version.NuGetPackageVersion);RepositoryType=git;RepositoryCommit=$($version.GitCommitId);RepositoryUrl=https://github.com/hangy/AntiXSS"
            displayName: Create packages

          - task: DotNetCoreCLI@2
            inputs:
              command: test
              projects: |
                .\Microsoft.Security.Application.Encoder.UnitTests\Microsoft.Security.Application.Encoder.UnitTests.csproj
                .\Microsoft.Security.Application.HtmlSanitization\Microsoft.Security.Application.HtmlSanitization.csproj
              arguments: -c $(BuildConfiguration) --no-build
            displayName: Run Tests

          - publish: $(Build.ArtifactStagingDirectory)\Packages
            artifact: Packages

  - stage: Release
    dependsOn: Build
    condition: and(succeeded(), ${{ parameters.DoRelease }})
    jobs:
      - job: NuGet
        steps:
          - checkout: none
          - download: current
            artifact: Packages
          - task: DotNetCoreCLI@2
            displayName: "dotnet push"
            inputs:
              command: push
              packagesToPush: "$(Pipeline.Workspace)/Packages/*.nupkg"
              nuGetFeedType: external
              publishFeedCredentials: NuGet

      - job: GitHub
        steps:
          - checkout: none
          - download: current
            artifact: Packages
          - task: GitHubRelease@1
            displayName: "Create GitHub Release"
            inputs:
              gitHubConnection: hangy
              repositoryName: "$(Build.Repository.Name)"
              action: Create
              target: "$(Build.SourceVersion)"
              assets: "$(Pipeline.Workspace)/Packages/*"
